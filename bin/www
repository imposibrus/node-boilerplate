#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app'),
    debug = require('debug')('node-boilerplate:server'),
    http = require('http'),
    config = require('../lib/config');

/**
 * Get port from environment and store in Express.
 */

var port = config.get('PORT');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

process.on('message', function(message) {
  if(message === 'shutdown') {
    process.exit(0);
  }
});


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error('Port ' + port + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error('Port ' + port + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  debug('Listening on port ' + server.address().port);
  if (process.send) process.send('online');
}
